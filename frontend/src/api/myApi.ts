/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Pump Perfect
 * OpenAPI spec version: 0.1.0
 */
export type GetBolusInsulinGetBolusInsulinGetParams = {
file_id: string;
from_datetime: string;
to_datetime: string;
step?: number;
dose?: Dose;
};

export type GetBasalInsulinGetBasalInsulinGetParams = {
file_id: string;
from_datetime: string;
to_datetime: string;
step?: number;
};

export type GetGlycemiaGetGlycemiaGetParams = {
file_id: string;
from_datetime: string;
to_datetime: string;
step?: number;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UploadZipResponseBody {
  file_id: string;
}

export interface Measurements {
  max: number;
  mean: number;
  median: number;
  min: number;
  q10: number;
  q25: number;
  q75: number;
  q90: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface GlycemiaResponseBody {
  data: Data[];
}

export type Dose = typeof Dose[keyof typeof Dose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Dose = {
  auto: 'auto',
  self: 'self',
  all: 'all',
} as const;

export interface Data {
  measurements: Measurements;
  time: number;
}

export interface BolusInsulinResponseBody {
  data: Data[];
}

export interface BodyUploadZipUploadZipPost {
  file: Blob;
}

export interface BasalInsulinResponseBody {
  data: Data[];
}



/**
 * @summary Upload Zip
 */
export type uploadZipUploadZipPostResponse = {
  data: UploadZipResponseBody;
  status: number;
}

export const getUploadZipUploadZipPostUrl = () => {


  return `http://localhost:8000/upload-zip`
}

export const uploadZipUploadZipPost = async (bodyUploadZipUploadZipPost: BodyUploadZipUploadZipPost, options?: RequestInit): Promise<uploadZipUploadZipPostResponse> => {
    const formData = new FormData();
formData.append('file', bodyUploadZipUploadZipPost.file)

  const res = await fetch(getUploadZipUploadZipPostUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



/**
 * @summary Get Glycemia
 */
export type getGlycemiaGetGlycemiaGetResponse = {
  data: GlycemiaResponseBody;
  status: number;
}

export const getGetGlycemiaGetGlycemiaGetUrl = (params: GetGlycemiaGetGlycemiaGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:8000/get-glycemia?${normalizedParams.toString()}` : `http://localhost:8000/get-glycemia`
}

export const getGlycemiaGetGlycemiaGet = async (params: GetGlycemiaGetGlycemiaGetParams, options?: RequestInit): Promise<getGlycemiaGetGlycemiaGetResponse> => {
  
  const res = await fetch(getGetGlycemiaGetGlycemiaGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



/**
 * @summary Get Basal Insulin
 */
export type getBasalInsulinGetBasalInsulinGetResponse = {
  data: BasalInsulinResponseBody;
  status: number;
}

export const getGetBasalInsulinGetBasalInsulinGetUrl = (params: GetBasalInsulinGetBasalInsulinGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:8000/get-basal-insulin?${normalizedParams.toString()}` : `http://localhost:8000/get-basal-insulin`
}

export const getBasalInsulinGetBasalInsulinGet = async (params: GetBasalInsulinGetBasalInsulinGetParams, options?: RequestInit): Promise<getBasalInsulinGetBasalInsulinGetResponse> => {
  
  const res = await fetch(getGetBasalInsulinGetBasalInsulinGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



/**
 * @summary Get Bolus Insulin
 */
export type getBolusInsulinGetBolusInsulinGetResponse = {
  data: BolusInsulinResponseBody;
  status: number;
}

export const getGetBolusInsulinGetBolusInsulinGetUrl = (params: GetBolusInsulinGetBolusInsulinGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:8000/get-bolus-insulin?${normalizedParams.toString()}` : `http://localhost:8000/get-bolus-insulin`
}

export const getBolusInsulinGetBolusInsulinGet = async (params: GetBolusInsulinGetBolusInsulinGetParams, options?: RequestInit): Promise<getBolusInsulinGetBolusInsulinGetResponse> => {
  
  const res = await fetch(getGetBolusInsulinGetBolusInsulinGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



