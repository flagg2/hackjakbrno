/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Pump Perfect
 * OpenAPI spec version: 0.1.0
 */
export type GetSimilarPatientsParams = {
  file_id: string;
};

export type InsertPatientEmbeddingParams = {
  file_id: string;
};

export type GetHypoglycemiaDistributionParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
};

export type GetHighestBolusDosageDistributionParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
  quantile?: number;
};

export type GetDosageDistributionParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
};

export type GetBolusInsulinParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
  dose?: Dose;
};

export type GetBasalInsulinParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
};

export type GetGlycemiaParams = {
  file_id: string;
  from_datetime: string;
  to_datetime: string;
  step_in_minutes?: number;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UploadZipResponseBody {
  file_id: string;
}

export interface MeasurementsResponseBody {
  max: number;
  mean: number;
  median: number;
  min: number;
  q10: number;
  q25: number;
  q75: number;
  q90: number;
}

export interface InsertPatientEmbeddingResponseBody {
  embedding: number[];
}

export interface HypoglycemiaMesurementBody {
  auto_bolus: number;
  combination: number;
  other: number;
  self_bolus: number;
}

export interface HypoglycemiaDataResponseBody {
  measurement: HypoglycemiaMesurementBody;
  time: number;
}

export interface HypoglycemiaDistributionResponseBody {
  data: HypoglycemiaDataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface HighestBolusDosageMeasurementResponseBody {
  percentage: number;
  tooltip_max: number;
  tooltip_med: number;
  tooltip_min: number;
}

export interface HighestBolusDosageDataResponseBody {
  measurement: HighestBolusDosageMeasurementResponseBody;
  time: number;
}

export interface HighestBolusDosageDistributionResponseBody {
  data: HighestBolusDosageDataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface GlycemiaResponseBody {
  data: DataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface GetSimilarPatientsResponseBody {
  patients: string[];
}

export type Dose = (typeof Dose)[keyof typeof Dose];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Dose = {
  auto: "auto",
  self: "self",
  carbs: "carbs",
  all: "all",
} as const;

export interface DosageDistributionResponseBody {
  data: BarChartDataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface DosageDistributionMeasurementsResponseBody {
  auto_bolus: number;
  basal: number;
  self_bolus: number;
}

export interface DataResponseBody {
  measurements: MeasurementsResponseBody;
  time: number;
}

export interface BolusInsulinResponseBody {
  data: DataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface BodyUploadZip {
  file: Blob;
}

export interface BasalInsulinResponseBody {
  data: DataResponseBody[];
  max_timestamp: string;
  min_timestamp: string;
}

export interface BarChartDataResponseBody {
  measurements: DosageDistributionMeasurementsResponseBody;
  time: number;
}

/**
 * @summary Upload Zip
 */
export type uploadZipResponse = {
  data: UploadZipResponseBody;
  status: number;
};

export const getUploadZipUrl = () => {
  return `http://backend:8000/upload-zip`;
};

export const uploadZip = async (
  bodyUploadZip: BodyUploadZip,
  options?: RequestInit
): Promise<uploadZipResponse> => {
  const formData = new FormData();
  formData.append("file", bodyUploadZip.file);

  const res = await fetch(getUploadZipUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Glycemia
 */
export type getGlycemiaResponse = {
  data: GlycemiaResponseBody;
  status: number;
};

export const getGetGlycemiaUrl = (params: GetGlycemiaParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-glycemia?${normalizedParams.toString()}`
    : `http://backend:8000/get-glycemia`;
};

export const getGlycemia = async (
  params: GetGlycemiaParams,
  options?: RequestInit
): Promise<getGlycemiaResponse> => {
  const res = await fetch(getGetGlycemiaUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Basal Insulin
 */
export type getBasalInsulinResponse = {
  data: BasalInsulinResponseBody;
  status: number;
};

export const getGetBasalInsulinUrl = (params: GetBasalInsulinParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-basal-insulin?${normalizedParams.toString()}`
    : `http://backend:8000/get-basal-insulin`;
};

export const getBasalInsulin = async (
  params: GetBasalInsulinParams,
  options?: RequestInit
): Promise<getBasalInsulinResponse> => {
  const res = await fetch(getGetBasalInsulinUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Bolus Insulin
 */
export type getBolusInsulinResponse = {
  data: BolusInsulinResponseBody;
  status: number;
};

export const getGetBolusInsulinUrl = (params: GetBolusInsulinParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-bolus-insulin?${normalizedParams.toString()}`
    : `http://backend:8000/get-bolus-insulin`;
};

export const getBolusInsulin = async (
  params: GetBolusInsulinParams,
  options?: RequestInit
): Promise<getBolusInsulinResponse> => {
  const res = await fetch(getGetBolusInsulinUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Dosage Distribution
 */
export type getDosageDistributionResponse = {
  data: DosageDistributionResponseBody;
  status: number;
};

export const getGetDosageDistributionUrl = (
  params: GetDosageDistributionParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-dosage-distribution?${normalizedParams.toString()}`
    : `http://backend:8000/get-dosage-distribution`;
};

export const getDosageDistribution = async (
  params: GetDosageDistributionParams,
  options?: RequestInit
): Promise<getDosageDistributionResponse> => {
  const res = await fetch(getGetDosageDistributionUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Highest Bolus Dosage Distribution
 */
export type getHighestBolusDosageDistributionResponse = {
  data: HighestBolusDosageDistributionResponseBody;
  status: number;
};

export const getGetHighestBolusDosageDistributionUrl = (
  params: GetHighestBolusDosageDistributionParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-highest-bolus-dosage-distribution?${normalizedParams.toString()}`
    : `http://backend:8000/get-highest-bolus-dosage-distribution`;
};

export const getHighestBolusDosageDistribution = async (
  params: GetHighestBolusDosageDistributionParams,
  options?: RequestInit
): Promise<getHighestBolusDosageDistributionResponse> => {
  const res = await fetch(getGetHighestBolusDosageDistributionUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Get Hypoglycemia Distribution
 */
export type getHypoglycemiaDistributionResponse = {
  data: HypoglycemiaDistributionResponseBody;
  status: number;
};

export const getGetHypoglycemiaDistributionUrl = (
  params: GetHypoglycemiaDistributionParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-hypoglycemia-distribution?${normalizedParams.toString()}`
    : `http://backend:8000/get-hypoglycemia-distribution`;
};

export const getHypoglycemiaDistribution = async (
  params: GetHypoglycemiaDistributionParams,
  options?: RequestInit
): Promise<getHypoglycemiaDistributionResponse> => {
  const res = await fetch(getGetHypoglycemiaDistributionUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Insert Patient Embedding
 */
export type insertPatientEmbeddingResponse = {
  data: InsertPatientEmbeddingResponseBody;
  status: number;
};

export const getInsertPatientEmbeddingUrl = (
  params: InsertPatientEmbeddingParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/insert-patient-embedding?${normalizedParams.toString()}`
    : `http://backend:8000/insert-patient-embedding`;
};

export const insertPatientEmbedding = async (
  params: InsertPatientEmbeddingParams,
  options?: RequestInit
): Promise<insertPatientEmbeddingResponse> => {
  const res = await fetch(getInsertPatientEmbeddingUrl(params), {
    ...options,
    method: "POST",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * @summary Insert Patient Embedding
 */
export type getSimilarPatientsResponse = {
  data: GetSimilarPatientsResponseBody;
  status: number;
};

export const getGetSimilarPatientsUrl = (params: GetSimilarPatientsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://backend:8000/get-similar-patients?${normalizedParams.toString()}`
    : `http://backend:8000/get-similar-patients`;
};

export const getSimilarPatients = async (
  params: GetSimilarPatientsParams,
  options?: RequestInit
): Promise<getSimilarPatientsResponse> => {
  const res = await fetch(getGetSimilarPatientsUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};
